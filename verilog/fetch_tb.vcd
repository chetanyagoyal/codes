$date
	Thu Feb 16 22:26:24 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module fetch_tb $end
$var wire 64 ! valP [63:0] $end
$var wire 64 " valC [63:0] $end
$var wire 4 # rB [3:0] $end
$var wire 4 $ rA [3:0] $end
$var wire 1 % inst_valid $end
$var wire 1 & imem_error $end
$var wire 4 ' ifun [3:0] $end
$var wire 4 ( icode [3:0] $end
$var wire 1 ) halt $end
$var reg 1 * clk $end
$var reg 64 + pc [63:0] $end
$scope module f1 $end
$var wire 1 * clk $end
$var wire 64 , pc [63:0] $end
$var reg 1 ) halt $end
$var reg 4 - icode [3:0] $end
$var reg 4 . ifun [3:0] $end
$var reg 1 & imem_error $end
$var reg 80 / instr [0:79] $end
$var reg 1 % instr_valid $end
$var reg 4 0 rA [3:0] $end
$var reg 4 1 rB [3:0] $end
$var reg 64 2 valC [63:0] $end
$var reg 64 3 valP [63:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1 3
bx 2
b1111 1
b1111 0
b10000011000000000000100110000111100101111111100000000000000000000000000000000 /
b0 .
b1 -
b0 ,
b0 +
0*
0)
b1 (
b0 '
0&
1%
b1111 $
b1111 #
bx "
b1 !
$end
#100000
b11 !
b11 3
b1 #
b1 1
b0 $
b0 0
b110 (
b110 -
b1100000000000010011000011110010111111110000000000000000000000000000000000000000 /
b1 +
b1 ,
1*
#200000
b1111111100000000000000000000000000000000000000000000000000000000 "
b1111111100000000000000000000000000000000000000000000000000000000 2
b1101 !
b1101 3
b10 #
b10 1
b1111 $
b1111 0
b11 (
b11 -
b110000111100101111111100000000000000000000000000000000000000000000000000000000 /
b11 +
b11 ,
0*
#300000
b10100000000000000000000000000000000000000000000000000000000 "
b10100000000000000000000000000000000000000000000000000000000 2
b10111 !
b10111 3
b11 #
b11 1
b110000111100110000010100000000000000000000000000000000000000000000000000000000 /
b1101 +
b1101 ,
1*
#400000
b100001 !
b100001 3
b100 #
b100 1
b110000111101000000010100000000000000000000000000000000000000000000000000000000 /
b10111 +
b10111 ,
0*
#500000
b100011 !
b100011 3
b101 #
b101 1
b100 $
b100 0
b10 (
b10 -
b100000010001010110000000110100001001010101011001100001001101010111001100110100 /
b100001 +
b100001 ,
1*
#600000
b100101 !
b100101 3
b100 #
b100 1
b11 $
b11 0
b110 (
b110 -
b1100000001101000010010101010110011000010011010101110011001101000000000000000000 /
b100011 +
b100011 ,
0*
#700000
b100111 !
b100111 3
b110 #
b110 1
b101 $
b101 0
b101 '
b101 .
b10 (
b10 -
b100101010101100110000100110101011100110011010000000000000000000000000000000000 /
b100101 +
b100101 ,
1*
#800000
b101001 !
b101001 3
b101 #
b101 1
b11 $
b11 0
b1 '
b1 .
b110 (
b110 -
b1100001001101010111001100110100000000000000000000000000000000000000000000000000 /
b100111 +
b100111 ,
0*
#900000
b1111 $
b1111 0
b11010000000000000000000000000000000000000000000000000000000000 "
b11010000000000000000000000000000000000000000000000000000000000 2
b110010 !
b110010 3
b1111 #
b1111 1
b11 '
b11 .
b111 (
b111 -
b1110011001101000000000000000000000000000000000000000000000000000000000000010000 /
b101001 +
b101001 ,
1*
#1000000
b110011 !
b110011 3
b1111 #
b1111 1
b1111 $
b1111 0
b0 '
b0 .
b1 (
b1 -
b1000000010000011000000011010100000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /
b110010 +
b110010 ,
0*
#1100000
b110100 !
b110100 3
b1111 #
b1111 1
b1111 $
b1111 0
b10000011000000011010100000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /
b110011 +
b110011 ,
1*
#1200000
b110110 !
b110110 3
b101 #
b101 1
b11 $
b11 0
b110 (
b110 -
b11000000011010100000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /
b110100 +
b110100 ,
0*
#1300000
b110111 !
b110111 3
1)
b1111 #
b1111 1
b1111 $
b1111 0
b0 (
b0 -
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /
b110110 +
b110110 ,
1*
#1400000
0*
